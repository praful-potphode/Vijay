{
	"name": "df_scd_type2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_productsdim",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "ds_az_dimproducts",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_az_dimproducts",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "ds_az_dimproducts",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "ds_az_dimproducts",
						"type": "DatasetReference"
					},
					"name": "sink3"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "cast1"
				},
				{
					"name": "select1"
				},
				{
					"name": "split1"
				},
				{
					"name": "exists1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          productid as string,",
				"          productname as string,",
				"          price as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          id as integer,",
				"          productid as integer,",
				"          productname as string,",
				"          price as decimal(19,4),",
				"          startdate as date,",
				"          enddate as date,",
				"          iscurrent as integer,",
				"          createdtime as date,",
				"          modifiedtime as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"split1@select1 derive(startdate = currentDate(),",
				"          iscurrent = 1,",
				"          createdtime = currentTimestamp()) ~> derivedColumn1",
				"cast1, source2 lookup(cast1@productid == source2@productid,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"source1 cast(output(",
				"          productid as integer,",
				"          price as integer",
				"     ),",
				"     errors: true) ~> cast1",
				"lookup1 select(mapColumn(",
				"          productid = cast1@productid,",
				"          productname = source1@productname,",
				"          price = cast1@price,",
				"          iscurrent",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 split(isNull(iscurrent),",
				"     disjoint: false) ~> split1@(select1, sink2)",
				"split1@sink2, source2 exists(split1@sink2@productid == source2@productid",
				"     && (split1@sink2@productname != source2@productname",
				"     ||  split1@sink2@price != source2@price),",
				"     negate:false,",
				"     broadcast: 'auto')~> exists1",
				"exists1 derive(iscurrent = 1,",
				"          createdtime = currentTimestamp(),",
				"          startdate = currentUTC('IST')) ~> derivedColumn2",
				"exists1 derive(iscurrent = 0,",
				"          modifiedtime = currentTimestamp(),",
				"          enddate = currentTimestamp()) ~> derivedColumn3",
				"derivedColumn3 alterRow(updateIf(true())) ~> alterRow1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id as integer,",
				"          productid as integer,",
				"          productname as string,",
				"          price as decimal(19,4),",
				"          startdate as date,",
				"          enddate as date,",
				"          iscurrent as integer,",
				"          createdtime as date,",
				"          modifiedtime as date",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
				"derivedColumn2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id as integer,",
				"          productid as integer,",
				"          productname as string,",
				"          price as decimal(19,4),",
				"          startdate as date,",
				"          enddate as date,",
				"          iscurrent as integer,",
				"          createdtime as date,",
				"          modifiedtime as date",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink2",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id as integer,",
				"          productid as integer,",
				"          productname as string,",
				"          price as decimal(19,4),",
				"          startdate as date,",
				"          enddate as date,",
				"          iscurrent as integer,",
				"          createdtime as date,",
				"          modifiedtime as date",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['productid'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink3"
			]
		}
	}
}